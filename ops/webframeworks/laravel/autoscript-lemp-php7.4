#!/bin/bash
# auto script 7.4 - lemp
# author : sixpathofdevops

echo "sixpathofdevops: Hello I'm the six path of devops, I will ask you one question before you proceed."
	sleep 2s

echo -n "sixpathofdevops: Is the system LEMP stack ready?? [Y/n]?  "
read -n1 update

echo #

if [[ "$update" = "y" ]] || [[ "$update" = "Y" ]];
then
echo
	sudo apt update
	sudo apt upgrade -y

	sudo apt install git unzip curl -y
echo

# web server
	sudo apt install nginx -y

echo "Installing nginx..."
echo "Done: Nginx"
	sleep 1s
echo "Version:"
	nginx -v


# server script
echo "Installing PHP7.4 repository..."
	sleep 1s
	sudo apt install software-properties-common
	sudo add-apt-repository ppa:ondrej/php -y
	sudo apt update -y

echo "Installing php7.4..."
	sudo apt install php7.4 -y


# uninstall apache2
	sudo apt purge apache2 -y

# clean some of packages
	sudo apt autoremove -y

# install some php modules
	sudo apt install php7.4-fpm php7.4-mysql php7.4-curl php7.4-json php7.4-mbstring php7.4-xml php7.4-bcmath php7.4-zip php7.4-gd -y

# dependencies for mcrypt
	sudo apt install php7.4-dev libmcrypt-dev php-pear -y

# mcrypt

# dev tools
	sudo apt install -y build-essential

# update channels
	sudo pecl channel-update pecl.php.net
	sudo pecl update-channels

# install mcrypt using pecl command
	sudo printf "\n" | sudo pecl install mcrypt

	sudo sed '1 a extension=mcrypt.so;' /etc/php/7.4/cli/php.ini

# restart web server to take affect alongside php
	sudo systemctl restart nginx

echo "restart server"
	sleep 1s

echo "Installing Database Server.."
	sleep 1s
	sudo apt install mariadb-server mariadb-client -y
	sudo systemctl status mysql --no-pager
	sudo systemctl enable mysql


sudo systemctl restart nginx
	sleep 1s
	clear


echo "Installing MySQL Security script... (sixpathdevops: I suggesting you to setup your own root password for this RDBMS)"
	sudo mysql_secure_installation
	sleep 2s

echo "(sixpathofdevops: Now try to enter your new root password"
#sudo apt-get install -y debconf-utils
#sudo mysql -u root -p -e "create user 'hivedev'@'%' identified by 'hive1234'"; -y
#sudo mysql -u root -p -e "grant all privileges on *.* to 'hivedev'@'%'";
#sudo mysql -u root -p -e "flush privileges";


# mysql
sudo mysql -u root -p <<MY_QUERY
CREATE USER 'lbdev'@'%' identified by 'lbdev1234';
GRANT ALL PRIVILEGES ON *.* TO 'lbdev'@'%';
FLUSH PRIVILEGES;
MY_QUERY


sudo sed -i -e 's/127.0.0.1/0.0.0.0/g' /etc/mysql/mariadb.conf.d/50-server.cnf
sudo systemctl restart mysql

# composer
cd ~
curl -sS https://getcomposer.org/installer -o composer-setup.php
sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer

# remove
sudo rm composer-setup.php



cd /var/www/html

#clone laravel
echo "Cloning laravel repository..."
	sudo git clone https://github.com/laravel/laravel.git

# enter dir
cd /var/www/html/laravel

# activate .env
echo "Activating environment file..."
	sudo mv .env.example .env

# install composer
echo "Installing packages via composer..."
	sleep 1s
	sudo composer install

# change permissions
echo "Set user and group permissions for the project..."
	sleep 1s
	sudo chmod -R 775 /var/www/html/laravel
	sudo chown -R www-data:www-data /var/www/html/laravel
	sudo chmod -R 777 /var/www/html/laravel/storage

# generate key
echo "Artisan Key Generate..."
	sleep 1s
	sudo php artisan key:generate


# web server configuration setup
echo "Setting up web server configuration"
	cd /etc/nginx/sites-available
	wget https://raw.githubusercontent.com/ne018/dreyops/master/ops/webframeworks/laravel/laravel_nginxconfig -O laravel.conf

echo "Removing default file"
	sudo rm default
	cd /etc/nginx/sites-enabled
	sudo rm default

echo "Make a symbolic link for your laravel"
  sudo ln -s /etc/nginx/sites-available/laravel.conf /etc/nginx/sites-enabled/laravel.conf


echo "Restarting Nginx server..."
	sleep 1s
	sudo systemctl restart nginx

else

printf  '\n'
echo "You need nothing on me. Bye."

fi
